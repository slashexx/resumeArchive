name: Convert LaTeX to PDF

on:
  push:
    branches: [ main, master ]
    paths:
      - 'main.tex'
  workflow_dispatch:

jobs:
  latex-to-pdf:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install LaTeX
      run: |
        sudo apt update
        sudo apt install -y texlive-latex-base texlive-latex-recommended texlive-fonts-recommended texlive-latex-extra texlive-fonts-extra
    
    - name: Compile LaTeX to PDF
      run: |
        pdflatex -interaction=nonstopmode main.tex
        if [ ! -f main.pdf ]; then
          echo "LaTeX compilation failed."
          exit 1
        fi
        echo "âœ… PDF compilation successful!"
        ls -la main.pdf
    
    - name: Generate PDF filename with current date
      id: generate-filename
      run: |
        # Get current date in YY_MM_DD format
        current_date=$(date +%y_%m_%d)
        filename="Dhruv_s_resume___${current_date}.pdf"
        
        echo "Generated filename: $filename"
        echo "pdf_filename=$filename" >> $GITHUB_OUTPUT
        echo "current_date=$current_date" >> $GITHUB_OUTPUT
    
    - name: Rename PDF and prepare for commit
      run: |
        pdf_filename="${{ steps.generate-filename.outputs.pdf_filename }}"
        
        # Copy to new filename (keeping original for reference)
        cp main.pdf "$pdf_filename"
        
        echo "PDF copied to: $pdf_filename"
        ls -la *.pdf
        
        # Configure git
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Check if PDF already exists and commit
      run: |
        pdf_filename="${{ steps.generate-filename.outputs.pdf_filename }}"
        current_date="${{ steps.generate-filename.outputs.current_date }}"
        
        # Check if file exists and remove old version if it does
        if [ -f "$pdf_filename" ] && git ls-files --error-unmatch "$pdf_filename" > /dev/null 2>&1; then
          echo "Removing existing PDF for today..."
          git rm "$pdf_filename"
          commit_message="ðŸ¤– Update resume PDF: $pdf_filename"
        else
          commit_message="ðŸ¤– Generate new resume PDF: $pdf_filename"
        fi
        
        # Add the new PDF
        git add "$pdf_filename"
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit (PDF might be identical)"
        else
          git commit -m "$commit_message"
          git push origin main
          echo "âœ… PDF committed and pushed successfully!"
        fi
    
    - name: Create summary
      run: |
        pdf_filename="${{ steps.generate-filename.outputs.pdf_filename }}"
        current_date="${{ steps.generate-filename.outputs.current_date }}"
        
        echo "## ðŸ“„ LaTeX to PDF Conversion Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Source File:** \`main.tex\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Generated PDF:** \`$pdf_filename\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Date:** $current_date" >> $GITHUB_STEP_SUMMARY
        echo "- **Status:** âœ… Successfully converted and committed" >> $GITHUB_STEP_SUMMARY
        
        # Get file size
        if [ -f "$pdf_filename" ]; then
          file_size=$(ls -lh "$pdf_filename" | awk '{print $5}')
          echo "- **File Size:** $file_size" >> $GITHUB_STEP_SUMMARY
        fi
